#include <bits/stdc++.h>
#include <utility>

using namespace std;
using ld = long double;
using ll = long long;

int k, m, n;
vector<pair<int, int>> field;

int max_interval(int s, int e) {
    // return max in an internal interval and the sum of the rest
    int inter = (field[e].first - field[s].first)/2, r = s+1, l = s+1, rs = field[s+1].second;
    int m = 0;
    while(l < e) {
        if(field[r].first - field[l].first < inter) {
            l++;
            rs += field[l].second;
        } else if(field[r].first - field[l].first > inter) {
            r = l;
        } else {
            m = max(m, rs);
            rs = 0;
            r = l;
        }
    }
    return m;
}

int main() {
    cin >> k >> m >> n;
    for(int i = 0; i < k; i++) {
        int a, b; cin >> a >> b;
        field.push_back(make_pair(a, b));
    }
    for(int i = 0; i < m; i++) {
        int a, b=-1; cin >> a;
        field.push_back(make_pair(a, b));
    }
    sort(field.begin(), field.end());

    vector<int> vals;
    int s = 0, e = 0;
    while(e < field.size()) {
        e = s;
        if(field[s].second == -1) s++;
        else {
            s--;
            int sum = 0;
            while(field[e].second != -1) {
                e++;
                sum += field[s].second;
            }
            int ret = max_interval(s, e);
            vals.push_back(ret);
            vals.push_back(sum-ret);
            s = e;
        }
    }
    sort(vals.begin(), vals.end());
    int ans = 0;
    for(int i = 1; i <= n; i++) {
        ans += vals[vals.size()-i];
    }
    cout << ans << "\n";
    return 0;
}
